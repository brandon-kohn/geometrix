//
//! Copyright © 2008-2011
//! Brandon Kohn
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
#include <geometrix/numeric/number_comparison_policy.hpp>
#include <geometrix/primitive/point.hpp>
#include <geometrix/utility/utilities.hpp>
#include <geometrix/primitive/vector_point_sequence.hpp>
#include <geometrix/primitive/polyline.hpp>
#include <geometrix/primitive/polygon.hpp>
#include <geometrix/primitive/point_sequence_utilities.hpp>
#include <geometrix/arithmetic/vector.hpp>
#include <geometrix/primitive/segment.hpp>
#include <geometrix/algorithm/node_bsp_tree_2d.hpp>
#include <geometrix/algorithm/solid_leaf_bsp_tree.hpp>
#include <geometrix/algorithm/hyperplane_partition_policies.hpp>
#include <geometrix/utility/ignore_unused_warnings.hpp>

#include "./2d_kernel_fixture.hpp"

#include <iostream>
#include <tuple>

struct node_bsptree2d_fixture : geometry_kernel_2d_fixture
{
    typedef geometrix::node_bsp_tree_2d< segment2 > bsp2;

    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2>;

    polygon2 get_outer_polygon(point2 ll, point2 ur, double offset)
    {
        using namespace geometrix;

        ll = ll - vector2{ offset, offset };
        ur = ur + vector2{ offset, offset };

        return { ll, point2{ get<0>(ur), get<1>(ll) }, ur, point2{ get<0>(ll), get<1>(ur) } };
    }
};

struct simplex_extractor 
{
    template <typename T>
    const T& operator()(const T& item) const { return item; }
};

template <typename Point, typename PointSequence, typename std::enable_if<geometrix::is_polyline<PointSequence>::value, bool>::type = true>
std::tuple<double, std::size_t> naive_min_distance(const Point& p, const PointSequence& pline)
{
    using namespace geometrix;
    using access = point_sequence_traits<PointSequence>;
	auto minDistance = (std::numeric_limits<double>::max)();
    auto segIndex = (std::numeric_limits<std::size_t>::max)();
	for (std::size_t i = 0, j = 1; j < access::size(pline); i = j++)
	{
		auto d2 = point_segment_distance_sqrd(p, access::get_point(pline, i), access::get_point(pline, j));
		if (d2 < minDistance)
		{
			minDistance = d2;
			segIndex = i;
		}
	}

    return std::make_tuple(minDistance, segIndex);
}

template <typename Point, typename PointSequence, typename std::enable_if<geometrix::is_polygon<PointSequence>::value, bool>::type = true>
std::tuple<double, std::size_t> naive_min_distance(const Point& p, const PointSequence& pline)
{
    using namespace geometrix;
    using access = point_sequence_traits<PointSequence>;
	auto minDistance = (std::numeric_limits<double>::max)();
    auto segIndex = (std::numeric_limits<std::size_t>::max)();
	for (std::size_t i = access::size(pline)-1, j = 0; j < access::size(pline); i = j++)
	{
		auto d2 = point_segment_distance_sqrd(p, access::get_point(pline, i), access::get_point(pline, j));
		if (d2 < minDistance)
		{
			minDistance = d2;
			segIndex = i;
		}
	}

    return std::make_tuple(minDistance, segIndex);
}

TEST_F(node_bsptree2d_fixture, polyline_bsp_distance_test)
{
    using namespace geometrix;
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2>;
    auto pline = polyline2 { { 1098.47527107, 1178.48809441 }, { 1071.39171392, 1185.84823745 }, { 1059.99795823, 1189.00357638 }, { 1049.91310331, 1191.87260701 }, { 1041.04481327, 1194.50296442 }, { 1033.30075223, 1196.94228366 }, { 1026.58858431, 1199.2381998 }, { 1020.81597365, 1201.43834793 }, { 1015.89058435, 1203.59036309 }, { 1011.72008055, 1205.74188038 }, { 1008.21212637, 1207.94053484 }, { 1005.27438592, 1210.23396156 }, { 1002.81452334, 1212.6697956 }, { 1000.74020273, 1215.29567203 }, { 998.959088237, 1218.15922592 }, { 997.378843969, 1221.30809234 }, { 995.907134052, 1224.78990635 }, { 994.451622609, 1228.65230303 }, { 992.919973761, 1232.94291745 }, { 993.292221797, 1237.59252211 }, { 993.702560876, 1241.76720346 }, { 994.228998352, 1245.50790274 }, { 994.94954158, 1248.85556122 }, { 995.942197916, 1251.85112014 }, { 997.284974713, 1254.53552075 }, { 999.055879328, 1256.94970431 }, { 1001.33291911, 1259.13461207 }, { 1004.19410143, 1261.13118529 }, { 1007.71743362, 1262.98036521 }, { 1011.98092305, 1264.72309309 }, { 1017.06257707, 1266.40031019 }, { 1023.04040304, 1268.05295775 }, { 1029.99240831, 1269.72197703 }, { 1037.99660023, 1271.44830928 }, { 1047.13098617, 1273.27289576 }, { 1057.47357347, 1275.23667771 }, { 1082.09538158, 1279.74559306 } };
    auto segs = polygon_as_segment_range<segment2>(pline);
    auto partitionPolicy = partition_policies::scored_selector_policy<identity_simplex_extractor, decltype(cmp)>(identity_simplex_extractor(), cmp);
    solid_bsp2 sut(segs, partitionPolicy, cmp, identity_simplex_extractor());

    for (std::size_t i = 0, j = 1; j < pline.size(); i = j++) {
        auto pi = pline[i];
        auto pj = pline[j];

        auto p = segment_mid_point(pi, pj);
        dimensionless2 v = normalize(pj - pi);
        auto vl = left_normal(v);
        auto vr = right_normal(v);

        auto idx = std::size_t {};
        auto pl = point2(p + vl);
        auto minD = sut.get_min_distance_sqrd_to_solid(pl, idx, cmp);
        double rd;
        std::size_t ridx;
        std::tie(rd, ridx) = naive_min_distance(pl, pline);
        EXPECT_TRUE(cmp.equals(minD, rd));
        EXPECT_EQ(idx, ridx);
        auto pr = point2(p + vr);
        minD = sut.get_min_distance_sqrd_to_solid(pr, idx, cmp);
        std::tie(rd, ridx) = naive_min_distance(pl, pline);
        EXPECT_TRUE(cmp.equals(minD, rd));
        EXPECT_EQ(idx, ridx);
    }
}

TEST_F(node_bsptree2d_fixture, polygon_bsp_distance_test)
{
    using namespace geometrix;
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2>;
    auto pgon = polygon2 { { 1098.47527107, 1178.48809441 }, { 1071.39171392, 1185.84823745 }, { 1059.99795823, 1189.00357638 }, { 1049.91310331, 1191.87260701 }, { 1041.04481327, 1194.50296442 }, { 1033.30075223, 1196.94228366 }, { 1026.58858431, 1199.2381998 }, { 1020.81597365, 1201.43834793 }, { 1015.89058435, 1203.59036309 }, { 1011.72008055, 1205.74188038 }, { 1008.21212637, 1207.94053484 }, { 1005.27438592, 1210.23396156 }, { 1002.81452334, 1212.6697956 }, { 1000.74020273, 1215.29567203 }, { 998.959088237, 1218.15922592 }, { 997.378843969, 1221.30809234 }, { 995.907134052, 1224.78990635 }, { 994.451622609, 1228.65230303 }, { 992.919973761, 1232.94291745 }, { 993.292221797, 1237.59252211 }, { 993.702560876, 1241.76720346 }, { 994.228998352, 1245.50790274 }, { 994.94954158, 1248.85556122 }, { 995.942197916, 1251.85112014 }, { 997.284974713, 1254.53552075 }, { 999.055879328, 1256.94970431 }, { 1001.33291911, 1259.13461207 }, { 1004.19410143, 1261.13118529 }, { 1007.71743362, 1262.98036521 }, { 1011.98092305, 1264.72309309 }, { 1017.06257707, 1266.40031019 }, { 1023.04040304, 1268.05295775 }, { 1029.99240831, 1269.72197703 }, { 1037.99660023, 1271.44830928 }, { 1047.13098617, 1273.27289576 }, { 1057.47357347, 1275.23667771 }, { 1082.09538158, 1279.74559306 } };
    auto segs = polygon_as_segment_range<segment2>(pgon);
    auto partitionPolicy = partition_policies::scored_selector_policy<identity_simplex_extractor, decltype(cmp)>(identity_simplex_extractor(), cmp);
    solid_bsp2 sut(segs, partitionPolicy, cmp, identity_simplex_extractor());

    for (std::size_t i = pgon.size()-1, j = 0; j < pgon.size(); i = j++) {
        auto pi = pgon[i];
        auto pj = pgon[j];

        auto p = segment_mid_point(pi, pj);
        dimensionless2 v = normalize(pj - pi);
        auto vl = left_normal(v);
        auto vr = right_normal(v);

        auto idx = std::size_t {};
        auto pl = point2(p + vl);
        auto minD = sut.get_min_distance_sqrd_to_solid(pl, idx, cmp);
        double rd;
        std::size_t ridx;
        std::tie(rd, ridx) = naive_min_distance(pl, pgon);
        EXPECT_TRUE(cmp.equals(minD, rd));
        EXPECT_EQ(idx, ridx);
        auto pr = point2(p + vr);
        minD = sut.get_min_distance_sqrd_to_solid(pr, idx, cmp);
        std::tie(rd, ridx) = naive_min_distance(pl, pgon);
        EXPECT_TRUE(cmp.equals(minD, rd));
        EXPECT_EQ(idx, ridx);
    }
}

TEST_F(node_bsptree2d_fixture, TestBooleanBSP)
{
    using namespace geometrix;

    std::vector<segment2> edges;

    point2 p1( 0., 0. );
    point2 p2( 10., 0. );
    edges.push_back( segment2( p1, p2 ) );
    point2 p3( 10., 10. );
    edges.push_back( segment2( p2, p3 ) );
    point2 p4( 0., 10. );
    edges.push_back( segment2( p3, p4 ) );
    edges.push_back( segment2( p4, p1 ) );

    std::vector< point2 > box1;
    box1.push_back( p1 );
    box1.push_back( p2 );
    box1.push_back( p3 );
    box1.push_back( p4 );

    point2 p5( 50., 50. );
    point2 p6( 150., 50. );
    edges.push_back( segment2( p5, p6 ) );
    point2 p7( 150., 150. );
    edges.push_back( segment2( p6, p7 ) );
    point2 p8( 50., 150. );
    edges.push_back( segment2( p7, p8 ) );
    edges.push_back( segment2( p8, p5 ) );

    std::vector< point2 > box2;
    box2.push_back( p5 );
    box2.push_back( p6 );
    box2.push_back( p7 );
    box2.push_back( p8 );

    absolute_tolerance_comparison_policy<double> compare(1e-10);
    typedef node_bsp_tree_2d< segment2 > bsp_tree;
    bsp_tree tree(polygon_as_segment_range< segment2 >(box1), partition_policies::first_segment_selector_policy< segment2 >(), compare);
    tree.insert(polygon_as_segment_range< segment2 >(box2), partition_policies::first_segment_selector_policy< segment2 >(), compare);

    auto b1c = get_centroid(box1);
    EXPECT_TRUE( tree.locate_point( b1c, compare ) == e_inside );

    auto b2c = get_centroid(box2);
    EXPECT_TRUE( tree.locate_point( b2c, compare ) == e_inside );
    EXPECT_TRUE( tree.locate_point( point2( 20., 20. ), compare )  == e_outside );
    EXPECT_TRUE( tree.locate_point( p1, compare )  == e_boundary );
    EXPECT_TRUE( tree.locate_point( p6, compare )  == e_boundary );
}

TEST_F(node_bsptree2d_fixture, ClassifyPolyline)
{
    using namespace geometrix;

    {
        polyline2 geometry{ point2{0,0}, point2{1,0}, point2{1,1}, point2{0,1} };
        point2 pos{ 0.5,0.5 };
        bsp2 tree(polyline_as_segment_range<segment2>(geometry), partition_policies::first_segment_selector_policy<segment2>(), cmp);
        auto result = tree.locate_point(pos, cmp);
        EXPECT_EQ(e_inside, result);
        point2 pos2{ 1.5, 0.5 };
        auto result2 = tree.locate_point(pos2, cmp);
        EXPECT_EQ(e_outside, result2);
    }

    {
        polyline2 geometry{ point2{ 0,0 }, point2{ 1,0 }, point2{ 1,1 }, point2{ 0,1 } };
        point2 pos{ -1, 0 };
        bsp2 tree(polyline_as_segment_range<segment2>(geometry), partition_policies::first_segment_selector_policy<segment2>(), cmp);
        auto result = tree.locate_point(pos, cmp);
        EXPECT_NE(e_outside, result);
    }

    {
        polyline2 geometry{ point2{0, -5}, point2{ 0,0 }, point2{ 1,0 }, point2{ 1,1 }, point2{ 0,1 }, point2{ -5, -5 } };
        bsp2 tree(polyline_as_segment_range<segment2>(geometry), partition_policies::first_segment_selector_policy<segment2>(), cmp);

        point2 pos3{ -0.5, -0.1 };
        auto result3 = tree.locate_point(pos3, cmp);
        EXPECT_EQ(e_inside, result3);
    }
}

#include <geometrix/algorithm/hyperplane_partition_policies.hpp>
TEST_F(node_bsptree2d_fixture, buildSolidLeafBSP_locate_point_with_interior_returns_einside)
{
    using namespace geometrix;
    polygon2 geometry{ point2{ 0,0 }, point2{ 1,0 }, point2{ 1,1 }, point2{ 0,1 } };
    auto segs = polygon_as_segment_range<segment2>(geometry);
    auto partitionPolicy = partition_policies::autopartition_policy();
    solid_bsp2 sut(segs, partitionPolicy, cmp);

    auto p = point2{ 0.5, 0.5 };

    auto loc = sut.point_in_solid_space(p, cmp);

    EXPECT_EQ(point_in_solid_classification::in_empty_space, loc);
}

TEST_F(node_bsptree2d_fixture, buildSolidLeafBSP_locate_Point_with_exterior_Returns_eoutside)
{
    using namespace geometrix;
    polygon2 geometry{ point2{ 0,0 }, point2{ 1,0 }, point2{ 1,1 }, point2{ 0,1 } };
    auto segs = polygon_as_segment_range<segment2>(geometry);
    auto partitionPolicy = partition_policies::autopartition_policy();
    solid_bsp2 sut(segs, partitionPolicy, cmp);

    auto p = point2{ 1.5, 1.5 };

    auto loc = sut.point_in_solid_space(p, cmp);

    EXPECT_EQ(point_in_solid_classification::in_solid, loc);
}

#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/algorithm/copy.hpp>

template <typename Segment, typename Point>
inline std::vector<Segment> polygon_with_holes_as_segment_range(const geometrix::polygon_with_holes<Point>& p)
{
    using namespace geometrix;

    typedef point_sequence_traits< polygon<Point> > access;
    std::vector<Segment> segments;
    auto size = access::size(p.get_outer());
    //for (std::size_t i = 0, j = 1; i < size; ++i, j = (j + 1) % size) {
    //    auto segment = construct<Segment>(access::get_point(p.get_outer(), i), access::get_point(p.get_outer(), j));
    //    segments.push_back(segment);
    //}

    for (const auto& hole : p.get_holes())
    {
        size = access::size(hole);
        for (std::size_t i = 0, j = 1; i < size; ++i, j = (j + 1) % size) {
            auto segment = construct<Segment>(access::get_point(hole, i), access::get_point(hole, j));
            segments.push_back(segment);
        }
    }

    return std::move(segments);
}

struct polygon_with_holes_solid_bsptree2d_fixture : geometry_kernel_2d_fixture
{
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2, geometrix::back_solid_leaf_bsp_traits<segment2> >;

    polygon_with_holes_solid_bsptree2d_fixture() = default;

    virtual void SetUp()
    {
        using namespace geometrix;
        using boost::adaptors::transformed;

        areas = std::vector<polygon2> {
              (polygon2{ { -59.842988908174448, 161.51553271198645 },{ -59.567088058101945, 162.04732614941895 },{ -59.101964120694902, 162.10330136166885 },{ -59.098964120668825, 162.10430136183277 },{ -12.036964120692573, 162.41030136169866 },{ -11.979964120662771, 162.3063013618812 },{ -13.347964120679535, 160.199301361572 },{ -13.346964120690245, 160.19830136187375 },{ -6.7819641206879169, 160.20030136173591 },{ -6.7589641207014211, 162.30430136201903 },{ -6.7009641206823289, 162.36130136158317 },{ 1.9070358793251216, 162.47630136180669 },{ 6.1220358792925254, 162.52130136173218 },{ 6.1810358793009073, 162.46130136167631 },{ 6.1700358793023042, 160.32830136176199 },{ 6.171035879291594, 160.32730136159807 },{ 13.375935879303142, 160.3863013619557 },{ 13.376935879292432, 160.38730136165395 },{ 13.353935879305936, 162.48130136169493 },{ 13.410935879335739, 162.5403013615869 },{ 23.190447447297629, 162.66430199984461 },{ 23.073172725096811, 163.8163536824286 },{ 13.443935879331548, 163.73030136199668 },{ 13.384935879323166, 163.78730136202648 },{ 13.326935879304074, 166.49730136198923 },{ 6.2540358793339692, 166.39930136175826 },{ 6.2240358793060295, 163.82730136159807 },{ 6.1660358792869374, 163.77030136156827 },{ 1.9030358793097548, 163.70730136195198 },{ -5.1529641206725501, 163.65030136192217 },{ -5.2129641206702217, 163.70930136181414 },{ -5.2129641206702217, 167.92330136196688 },{ -5.1549641207093373, 167.98230136185884 },{ 2.0060358793125488, 168.02830136194825 },{ 2.0090358793386258, 169.41630136175081 },{ 2.0080358792911284, 169.41730136191472 },{ -6.8139641206944361, 169.3523013619706 },{ -6.7209641207009554, 163.82730136159807 },{ -6.7769641206832603, 163.76830136170611 },{ -11.881964120664634, 163.54130136175081 },{ -11.88696412066929, 163.54130136175081 },{ -12.470964120700955, 163.57230136170983 },{ -59.089964120707009, 163.16130136186257 },{ -59.106964120699558, 163.16030136169866 },{ -59.138964120706078, 163.16030136169866 },{ -59.140964120684657, 163.15930136200041 },{ -60.326964120671619, 163.09630136191845 },{ -60.363964120682795, 163.10930136172101 },{ -62.098964120668825, 164.67330136196688 },{ -62.115964120661374, 164.71030136197805 },{ -62.157964120677207, 165.68630136176944 },{ -62.157964120677207, 165.68730136193335 },{ -62.191964120662306, 168.94830136187375 },{ -62.133964120701421, 169.00830136192963 },{ -57.079964120697696, 169.05130136199296 },{ -57.073964120703749, 170.63330136192963 },{ -57.074964120693039, 170.63430136162788 },{ -60.910964120703284, 170.6023013619706 },{ -62.163964120671153, 170.5903013618663 },{ -62.222964120679535, 170.6473013618961 },{ -62.299964120669756, 175.73630136158317 },{ -62.241964120708872, 175.7953013619408 },{ -60.893964120710734, 175.824301361572 },{ -60.894964120700024, 175.824301361572 },{ -60.970964120700955, 181.81730136182159 },{ -61.634964120690711, 181.80530136171728 },{ -61.640964120684657, 181.80530136171728 },{ -62.615964120661374, 181.92230136180297 },{ -62.66596412070794, 181.97930136183277 },{ -62.658964120666496, 185.99130136193708 },{ -62.645964120689314, 186.02530136192217 },{ -62.269964120700024, 186.44030136195943 },{ -62.267964120663237, 189.92230136180297 },{ -62.628964120696764, 190.39830136159435 },{ -62.639964120695367, 190.42930136201903 },{ -62.718964120664168, 196.25930136162788 },{ -62.690964120673016, 196.30730136157945 },{ -62.316964120662306, 196.51230136165395 },{ -62.29396412067581, 196.51830136170611 },{ -60.749964120681398, 196.57830136176199 },{ -60.749964120681398, 196.5793013619259 },{ -60.829964120697696, 202.53330136183649 },{ -62.360964120714925, 202.47330136178061 },{ -62.421964120701887, 202.53130136197433 },{ -62.571964120666962, 208.10330136166885 },{ -62.571964120666962, 208.10530136199668 },{ -62.881964120664634, 208.65630136197433 },{ -62.888964120706078, 208.67930136201903 },{ -62.91696412069723, 209.83830136200413 },{ -62.898964120715391, 209.87830136157572 },{ -62.523964120715391, 210.21230136184022 },{ -62.259964120690711, 211.41430136188865 },{ -62.206964120676275, 211.45830136165023 },{ -59.493964120687451, 211.5403013615869 },{ -59.492964120698161, 211.5403013615869 },{ -59.506964120664634, 212.72630136180669 },{ -64.735964120714925, 212.68430136190727 },{ -64.998964120692108, 211.46430136170238 },{ -65.001964120659977, 211.45830136165023 },{ -65.001964120659977, 211.45730136195198 },{ -65.002964120707475, 211.44630136201158 },{ -65.003964120696764, 211.44030136195943 },{ -65.000964120670687, 211.4313013618812 },{ -64.936964120715857, 202.31130136176944 },{ -64.935964120668359, 202.30830136174336 },{ -64.860964120714925, 196.02730136178434 },{ -64.716964120685589, 182.10430136183277 },{ -64.689964120683726, 175.37630136171356 },{ -64.655964120698627, 168.41130136186257 },{ -64.655964120698627, 168.41030136169866 },{ -64.66796412068652, 165.70330136176199 },{ -64.66896412067581, 165.70130136189982 },{ -64.646964120678604, 164.42530136182904 },{ -64.371964120713528, 163.34530136175454 },{ -64.189964120683726, 162.70730136195198 },{ -64.188964120694436, 162.7043013619259 },{ -63.38696412066929, 161.4313013618812 },{ -62.644964120700024, 160.78430136200041 },{ -61.757964120712131, 160.40330136194825 },{ -61.751964120659977, 160.40130136162043 },{ -61.009964120690711, 160.19530136184767 },{ -61.008964120701421, 160.19530136184767 },{ -61.004964120686054, 160.19430136168376 },{ -59.743964120687451, 159.95230136159807 },{ -59.739964120672084, 159.95230136159807 },{ -59.236964120704215, 159.9153013615869 } })
            , (polygon2{ { -126.81296412070515, 159.53230136167258 },{ -126.77596412069397, 159.54730136180297 },{ -126.14496412070002, 159.54830136196688 },{ -125.30996412067907, 159.56030136160553 },{ -123.14796412066789, 159.57030136184767 },{ -120.15096412069397, 159.59130136156455 },{ -119.14996412070468, 159.59530136175454 },{ -118.70996412070235, 161.21830136189237 },{ -118.58896412071772, 161.24230136163533 },{ -117.92296412069118, 160.37830136157572 },{ -117.9209641207126, 160.37630136171356 },{ -116.9429641207098, 159.88230136176571 },{ -116.93896412069444, 159.88030136190355 },{ -115.40296412067255, 159.59430136159062 },{ -115.37896412069676, 161.9433013619855 },{ -115.31896412069909, 162.00130136171356 },{ -101.30396412068512, 161.86930136196315 },{ -101.30196412070654, 161.86830136179924 },{ -101.24196412070887, 161.86830136179924 },{ -83.41596412070794, 161.8863013619557 },{ -81.687964120705146, 161.94030136195943 },{ -81.627964120707475, 161.88430136162788 },{ -81.535964120703284, 159.71730136172846 },{ -80.141964120673947, 159.71430136170238 },{ -80.137964120716788, 159.71230136184022 },{ -80.119964120676741, 159.71430136170238 },{ -80.105964120710269, 159.71430136170238 },{ -80.103964120673481, 159.7153013618663 },{ -78.94796412071446, 159.81930136168376 },{ -78.945964120677672, 159.81930136168376 },{ -78.246964120713528, 159.96230136184022 },{ -78.240964120661374, 159.96430136170238 },{ -77.574964120693039, 160.25030136201531 },{ -77.005964120675344, 160.62630136171356 },{ -75.845964120700955, 161.59930136194453 },{ -75.843964120664168, 161.60130136180669 },{ -75.361964120704215, 162.34930136194453 },{ -75.360964120714925, 162.35130136180669 },{ -74.972964120679535, 163.81930136168376 },{ -74.90096412069397, 165.29630136163905 },{ -74.90096412069397, 165.29830136196688 },{ -74.860964120714925, 165.70830136165023 },{ -74.859964120667428, 165.71130136167631 },{ -74.859964120667428, 165.72630136180669 },{ -74.857964120688848, 165.74430136196315 },{ -74.859964120667428, 165.74830136168748 },{ -74.978964120673481, 194.2153013618663 },{ -74.979964120662771, 194.21630136156455 },{ -75.021964120678604, 200.42930136201903 },{ -75.049964120669756, 206.92830136185512 },{ -75.053964120685123, 210.60630136169493 },{ -75.04296412068652, 212.5973013616167 },{ -75.04396412067581, 212.59830136178061 },{ -77.55796412070049, 212.58230136195198 },{ -77.562964120705146, 211.20730136195198 },{ -77.567964120709803, 211.18430136190727 },{ -77.838964120717719, 210.6473013618961 },{ -77.861964120704215, 210.62430136185139 },{ -78.385964120680001, 210.35930136172101 },{ -78.40296412067255, 210.35430136183277 },{ -79.453964120708406, 210.23030136199668 },{ -79.459964120702352, 210.23030136199668 },{ -80.584964120702352, 210.24430136196315 },{ -80.596964120690245, 210.24630136182532 },{ -81.818964120699093, 210.56130136176944 },{ -81.798964120680466, 207.36230136174709 },{ -81.796964120701887, 207.36030136188492 },{ -80.715964120696299, 207.23030136199668 },{ -79.055964120663702, 207.02730136178434 },{ -77.837964120670222, 206.88230136176571 },{ -77.787964120681863, 206.824301361572 },{ -77.848964120668825, 201.26530136168003 },{ -77.909964120713994, 201.20730136195198 },{ -82.40296412067255, 201.31930136168376 },{ -82.398964120715391, 194.9773013619706 },{ -81.448964120703749, 194.69130136165768 },{ -81.409964120713994, 194.63730136165395 },{ -81.425964120717254, 193.08730136184022 },{ -77.592964120674878, 191.83430136181414 },{ -77.554964120674413, 191.78230136167258 },{ -77.338964120717719, 165.67730136169121 },{ -77.339964120707009, 165.66730136191472 },{ -77.517964120663237, 164.7453013616614 },{ -77.539964120660443, 164.71130136167631 },{ -80.036964120692573, 163.08330136165023 },{ -80.062964120705146, 163.074301361572 },{ -83.303964120685123, 162.97630136180669 },{ -83.305964120663702, 162.97630136180669 },{ -101.46796412067488, 163.1933013619855 },{ -101.46996412071167, 163.19230136182159 },{ -115.51396412070608, 163.21630136156455 },{ -115.52296412066789, 163.21730136172846 },{ -118.52396412071539, 163.79730136180297 },{ -118.56996412068838, 163.8523013619706 },{ -118.51296412071679, 180.76930136187002 },{ -118.51396412070608, 180.77030136156827 },{ -123.33196412067628, 180.91330136172473 },{ -123.33296412066557, 180.91230136202648 },{ -123.30896412068978, 168.43930136179551 },{ -123.2159641206963, 163.1883013616316 },{ -123.27396412071539, 163.12930136173964 },{ -126.88896412070608, 163.06130136176944 },{ -126.88996412069537, 163.06130136176944 },{ -135.26654051680816, 163.07025714917108 },{ -136.06069755629869, 159.61333827115595 },{ -135.27796412067255, 159.60630136169493 },{ -129.1249641206814, 159.54930136166513 },{ -126.82096412067767, 159.52430136175826 } })
            , (polygon2{ { -70.234964120667428, 119.72530136164278 },{ -69.461964120680932, 120.24930136185139 },{ -69.458964120713063, 120.25230136187747 },{ -69.160964120703284, 120.76330136181787 },{ -69.160964120703284, 120.76430136198178 },{ -69.132964120712131, 122.36530136177316 },{ -69.147964120667893, 122.82230136170983 },{ -69.147964120667893, 122.82330136187375 },{ -69.207964120665565, 125.8403013618663 },{ -69.207964120665565, 125.84130136156455 },{ -69.213964120717719, 128.53030136181042 },{ -69.229964120662771, 131.92530136182904 },{ -69.282964120677207, 134.21830136189237 },{ -69.342964120674878, 137.07530136173591 },{ -69.342964120674878, 137.07730136159807 },{ -69.30796412070049, 138.7153013618663 },{ -69.51196412066929, 141.08430136181414 },{ -69.512964120716788, 141.08630136167631 },{ -70.024964120704681, 141.49130136193708 },{ -70.029964120709337, 141.4953013616614 },{ -70.030964120698627, 141.49630136182532 },{ -70.04096412070794, 141.49430136196315 },{ -70.15196412068326, 141.49830136168748 },{ -70.659964120713994, 141.09430136159062 },{ -71.225964120705612, 140.32530136173591 },{ -71.458964120713063, 139.29430136177689 },{ -71.458964120713063, 139.2903013615869 },{ -71.491964120708872, 137.9653013618663 },{ -71.491964120708872, 137.96330136200413 },{ -71.486964120704215, 137.32830136176199 },{ -71.335964120691642, 129.36530136177316 },{ -71.314964120683726, 127.40330136194825 },{ -71.228964120673481, 123.4313013618812 },{ -71.174964120669756, 121.26330136181787 },{ -71.174964120669756, 121.26030136179179 },{ -71.203964120708406, 120.3403013618663 },{ -71.203964120708406, 120.33830136200413 },{ -70.949964120693039, 119.96830136189237 },{ -70.946964120666962, 119.96630136156455 },{ -70.366964120708872, 119.75130136171356 },{ -70.262964120716788, 119.72930136183277 },{ -70.260964120680001, 119.72830136166885 },{ -70.256964120664634, 119.7273013619706 },{ -70.239964120672084, 119.72330136178061 } })
            , (polygon2{ { -70.155964120698627, 104.33330136165023 },{ -70.15396412066184, 104.33730136184022 },{ -69.719964120711666, 104.66930136177689 },{ -69.410964120703284, 105.07830136176199 },{ -69.250964120670687, 105.51330136181787 },{ -69.239964120672084, 107.16830136161298 },{ -69.249964120681398, 109.04130136175081 },{ -69.550964120717254, 109.91830136161298 },{ -70.169964120665099, 110.32330136187375 },{ -70.172964120691177, 110.32530136173591 },{ -70.174964120669756, 110.32630136189982 },{ -70.177964120695833, 110.32530136173591 },{ -70.553964120685123, 110.21730136172846 },{ -71.014964120695367, 109.94030136195943 },{ -71.271964120678604, 109.39430136187002 },{ -71.272964120667893, 109.38930136198178 },{ -71.264964120695367, 108.33530136197805 },{ -71.253964120696764, 106.74930136185139 },{ -71.241964120708872, 105.1653013615869 },{ -71.240964120661374, 105.15930136200041 },{ -71.148964120715391, 104.80230136169121 },{ -70.230964120710269, 104.34930136194453 },{ -70.174964120669756, 104.32130136201158 } })
            , (polygon2{ { -78.002138914249372, 95.595670043956488 },{ -77.446964120666962, 96.066301361657679 },{ -77.438964120694436, 96.072301361709833 },{ -76.706964120676275, 96.485301361884922 },{ -76.700964120682329, 96.487301361747086 },{ -76.691964120662306, 96.494301361963153 },{ -76.686964120715857, 96.49730136198923 },{ -76.68396412068978, 96.504301361739635 },{ -76.241964120708872, 96.963301362004131 },{ -75.835964120691642, 97.670301361940801 },{ -75.350964120705612, 98.876301361713558 },{ -75.348964120668825, 98.882301361765712 },{ -75.047964120691177, 99.965301361866295 },{ -75.047964120691177, 99.970301361754537 },{ -74.619964120676741, 101.73330136202276 },{ -74.616964120708872, 101.73930136160925 },{ -74.616964120708872, 101.74330136179924 },{ -74.615964120661374, 101.75330136157572 },{ -74.613964120682795, 101.76230136165395 },{ -74.615964120661374, 101.76930136187002 },{ -74.587964120670222, 103.0903013618663 },{ -74.586964120680932, 103.09230136172846 },{ -74.586964120680932, 103.11130136158317 },{ -74.575964120682329, 105.05930136190727 },{ -74.565964120673016, 107.01230136165395 },{ -74.550964120717254, 108.30730136157945 },{ -74.539964120660443, 110.0403013615869 },{ -74.523964120715391, 111.02330136159435 },{ -74.509964120690711, 112.11430136160925 },{ -74.500964120670687, 112.12930136173964 },{ -74.479964120662771, 113.08830136200413 },{ -74.514964120695367, 114.93230136157945 },{ -74.57296412071446, 120.61830136179924 },{ -74.571964120666962, 120.6203013616614 },{ -74.840964120696299, 141.39830136159435 },{ -74.881964120664634, 141.39530136156827 },{ -74.945964120677672, 141.4543013619259 },{ -74.944964120688383, 142.98930136160925 },{ -74.962964120670222, 144.60530136199668 },{ -75.022964120667893, 145.25530136190355 },{ -75.228964120673481, 146.07630136189982 },{ -75.784964120713994, 146.81130136176944 },{ -75.786964120692573, 146.8133013616316 },{ -76.457964120665565, 147.47930136183277 },{ -77.095964120700955, 147.69530136184767 },{ -78.27896412066184, 147.87730136187747 },{ -78.279964120709337, 147.87730136187747 },{ -79.738964120682795, 148.03430136200041 },{ -79.744964120676741, 148.03730136202648 },{ -79.759964120690711, 148.03730136202648 },{ -79.773964120715391, 148.03930136188865 },{ -79.77896412066184, 148.03730136202648 },{ -85.266964120673947, 148.00530136190355 },{ -90.124964120681398, 147.99330136179924 },{ -101.40196412068326, 147.96030136197805 },{ -119.15796412067721, 147.97330136178061 },{ -119.18696412071586, 147.98430136172101 },{ -120.32396412070375, 147.96630136156455 },{ -121.18896412069444, 147.95130136189982 },{ -122.18796412070515, 147.93530136160553 },{ -123.18696412071586, 147.91830136161298 },{ -123.66596412070794, 147.91030136169866 },{ -123.76596412068466, 146.71430136170238 },{ -123.83296412066557, 139.81430136179551 },{ -121.95707778737415, 141.13007202837616 },{ -120.19732916232897, 141.58186023682356 },{ -119.50396412069676, 141.81630136165768 },{ -103.97096412070096, 143.40030136192217 },{ -103.96796412067488, 143.40130136162043 },{ -103.72396412066882, 143.70030136173591 },{ -103.71896412066417, 143.70630136178806 },{ -103.10396412067348, 144.2613013619557 },{ -103.10296412068419, 144.2613013619557 },{ -102.4879641206935, 144.79230136191472 },{ -102.48596412071493, 144.79430136177689 },{ -101.76096412068, 145.34230136172846 },{ -101.75596412067534, 145.34530136175454 },{ -100.71396412071772, 145.95730136195198 },{ -100.70396412070841, 145.96130136167631 },{ -100.32296412071446, 146.08530136197805 },{ -100.31996412068838, 146.08630136167631 },{ -99.749964120681398, 146.2273013619706 },{ -99.741964120708872, 146.22830136166885 },{ -98.950964120682329, 146.28630136186257 },{ -98.93296412070049, 146.28430136200041 },{ -98.360964120714925, 146.11130136158317 },{ -79.787964120681863, 146.13530136179179 },{ -79.729964120662771, 146.0793013619259 },{ -79.577964120660909, 142.55430136201903 },{ -77.605964120710269, 141.21830136189237 },{ -77.582964120665565, 141.17630136199296 },{ -77.105964120710269, 121.06930136168376 },{ -77.105964120710269, 121.06730136182159 },{ -77.235964120714925, 113.0633013616316 },{ -77.234964120667428, 113.06130136176944 },{ -77.256964120664634, 105.50830136192963 },{ -77.316964120662306, 105.449301361572 },{ -81.91796412068652, 105.50830136192963 },{ -81.91896412067581, 105.50830136192963 },{ -82.019964120700024, 103.42230136180297 },{ -78.326191454019863, 103.27319269487634 },{ -78.731748787336983, 102.51086069503799 },{ -79.848197454004548, 101.75863936170936 },{ -81.370752787333913, 100.3044140287675 },{ -80.251964120659977, 98.745301361661404 },{ -80.255964120675344, 98.744301361963153 },{ -80.263964120706078, 98.737301361747086 },{ -80.267964120663237, 98.734301361721009 },{ -80.280964120698627, 98.725301361642778 },{ -80.282964120677207, 98.721301361918449 },{ -81.253449456591625, 97.910997248720378 } })
            , (polygon2{ { 22.701023126370274, 148.6442247191444 },{ 18.437935879337601, 148.60430136183277 },{ 2.057035879290197, 148.47930136183277 },{ -60.465964120696299, 148.19730136170983 },{ -60.468964120664168, 148.19830136187375 },{ -60.482964120688848, 148.19730136170983 },{ -60.503964120696764, 148.19730136170983 },{ -60.505964120675344, 148.19630136201158 },{ -61.949964120693039, 148.0903013618663 },{ -61.955964120686986, 148.0903013618663 },{ -63.04196412069723, 147.97930136183277 },{ -63.694964120688383, 147.8133013616316 },{ -64.194964120688383, 147.50330136157572 },{ -64.91896412067581, 146.73630136158317 },{ -65.547964120691177, 145.87730136187747 },{ -65.960964120691642, 144.93630136176944 },{ -65.962964120670222, 144.92830136185512 },{ -66.032964120677207, 144.23430136172101 },{ -66.032964120677207, 144.22830136166885 },{ -66.050964120717254, 143.33930136170238 },{ -66.050964120717254, 143.33730136184022 },{ -66.049964120669756, 141.53830136172473 },{ -66.0569641207112, 140.30130136199296 },{ -66.0569641207112, 140.30030136182904 },{ -66.047964120691177, 139.29730136180297 },{ -66.038964120671153, 137.30130136199296 },{ -66.030964120698627, 135.30430136201903 },{ -66.02696412068326, 133.97430136194453 },{ -66.019964120700024, 132.20030136173591 },{ -66.017964120663237, 131.18730136193335 },{ -66.014964120695367, 130.03030136181042 },{ -66.010964120680001, 128.70630136178806 },{ -66.004964120686054, 127.19430136168376 },{ -65.987964120693505, 125.53330136183649 },{ -65.970964120700955, 123.87130136182532 },{ -65.960964120691642, 122.76530136168003 },{ -65.945964120677672, 121.28830136172473 },{ -65.930964120663702, 118.76630136184394 },{ -65.897964120667893, 108.49930136185139 },{ -65.897964120667893, 108.44630136201158 },{ -65.858964120678138, 107.03530136169866 },{ -65.858964120678138, 107.03430136200041 },{ -65.845964120700955, 105.39130136184394 },{ -65.812964120705146, 104.27130136173218 },{ -65.812964120705146, 104.26730136200786 },{ -65.844964120711666, 103.58330136165023 },{ -65.845964120700955, 103.57730136159807 },{ -66.097964120679535, 102.11830136179924 },{ -66.105964120710269, 102.1023013619706 },{ -66.105964120710269, 102.09930136194453 },{ -66.083964120713063, 102.09630136191845 },{ -64.060964120668359, 101.23730136174709 },{ -64.050964120717254, 101.23130136169493 },{ -62.847970449423883, 100.34976993687451 },{ -55.39924044336658, 102.66576161934063 },{ -56.109964120667428, 104.60430136183277 },{ -56.112964120693505, 104.62130136182532 },{ -56.191964120662306, 108.58730136184022 },{ -62.440964120673016, 108.51730136200786 },{ -62.499964120681398, 108.57530136173591 },{ -62.503964120696764, 111.62130136182532 },{ -62.44796412071446, 111.68030136171728 },{ -59.846964120690245, 111.7563013616018 },{ -59.80896412068978, 114.71130136167631 },{ -59.80896412068978, 114.71330136200413 },{ -59.753964120696764, 115.98530136188492 },{ -61.958964120713063, 115.99030136177316 },{ -61.997964120702818, 116.00830136192963 },{ -63.169964120665099, 117.36130136158317 },{ -63.1819641207112, 117.38530136179179 },{ -63.44796412071446, 118.89330136170611 },{ -63.448964120703749, 118.90230136178434 },{ -63.434964120679069, 127.70230136159807 },{ -63.379964120686054, 127.76030136179179 },{ -61.977964120684192, 127.82630136189982 },{ -61.944964120688383, 130.16230136202648 },{ -61.888964120706078, 130.22030136175454 },{ -60.053964120685123, 130.28130136197433 },{ -60.039964120660443, 134.35430136183277 },{ -60.04096412070794, 134.35530136199668 },{ -62.619964120676741, 134.26730136200786 },{ -62.680964120663702, 134.324301361572 },{ -62.816964120662306, 141.58830136200413 },{ -62.758964120701421, 141.64830136159435 },{ -60.465964120696299, 141.69530136184767 },{ -60.462964120670222, 141.69530136184767 },{ -55.813964120694436, 141.49130136193708 },{ -55.767964120663237, 146.27530136192217 },{ -55.709964120702352, 146.33330136165023 },{ -39.65096412069397, 146.42330136196688 },{ 0.75180854595964774, 144.11540202843025 },{ 7.1890558793093078, 141.00939002865925 },{ 11.930407879292034, 139.42538402834907 },{ 22.31368148420006, 137.0862382221967 } })
        };

        auto bounds = get_bounds(areas[0], cmp);
        for (std::size_t i = 1; i < areas.size(); ++i) {
            bounds = update_bound(bounds, get_bounds(areas[i], cmp));
        }

        point2 ll = { std::get<e_xmin>(bounds), std::get<e_ymin>(bounds) };
        point2 ur = { std::get<e_xmax>(bounds), std::get<e_ymax>(bounds) };

        auto outer = get_outer_polygon(ll, ur, 5.0);

        std::vector<polygon2> holes;
        boost::copy(areas | transformed([](const polygon2& pgon) { return reverse(pgon); }), std::back_inserter(holes));

        poly = polygon_with_holes2{ outer, holes };

        auto segs = polygon_with_holes_as_segment_range<segment2>(poly);
        auto partitionPolicy = partition_policies::autopartition_policy();
        sut = solid_bsp2{ segs, partitionPolicy, cmp };
    }

    virtual void TearDown()
    {

    }

    polygon2 get_outer_polygon(point2 ll, point2 ur, double offset)
    {
        using namespace geometrix;

        ll = ll - vector2{ offset, offset };
        ur = ur + vector2{ offset, offset };

        return { ll, point2{ get<0>(ur), get<1>(ll) }, ur, point2{ get<0>(ll), get<1>(ur) } };
    }

    std::vector<polygon2> areas;
    polygon_with_holes2 poly;
    solid_bsp2 sut;
};

TEST_F(polygon_with_holes_solid_bsptree2d_fixture, locate_point_in_polygon_with_holes_Point_outside_Returns_eoutside)
{
    using namespace geometrix;
    auto origin = get_centroid(areas[2]);//! areas[2] has an interior centroid -> which is an exterior point because areas[2] is a hole.

    auto result = sut.point_in_solid_space(origin, cmp);

    EXPECT_EQ(point_in_solid_classification::in_solid, result);
}

#include <geometrix/algorithm/intersection/ray_segment_intersection.hpp>
TEST_F(polygon_with_holes_solid_bsptree2d_fixture, ray_tracer_in_polygon_with_holes_Point_inside_Returns_true)
{
    using namespace geometrix;
    point2 origin = get_centroid(areas[2]);//! areas[2] has an interior centroid -> which is an exterior point because areas[2] is a hole.
    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    EXPECT_TRUE(result);
    EXPECT_TRUE(cmp.equals(result.intersection_distance(), 0.0));
}

TEST_F(polygon_with_holes_solid_bsptree2d_fixture, ray_tracer_in_polygon_with_holes_Point_outside_Returns_true)
{
    using namespace geometrix;
    point2 origin = get_centroid(areas[2]) + vector2{ -20.0, 0.0 };//! areas[2] has an interior centroid -> which is an exterior point because areas[2] is a hole.
    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    point2 q = origin + result.intersection_distance() * ray;

    EXPECT_TRUE(result);
    EXPECT_EQ(320UL, result.get_data());
    EXPECT_TRUE(numeric_sequence_equals(q, point2{ -77.331149141034288, 130.56153449407171 }, cmp));
}

struct polygon_solid_bsptree2d_fixture : geometry_kernel_2d_fixture
{
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2>;

    polygon_solid_bsptree2d_fixture() = default;

    virtual void SetUp()
    {
        using namespace geometrix;
        using boost::adaptors::transformed;

        pgon = polygon2{ point2{ 0,0 }, point2{ 0,5 }, point2{ 5,5 }, point2{ 5,0 } };
        auto segs = polygon_as_segment_range<segment2>(pgon);
        auto partitionPolicy = partition_policies::autopartition_policy();
        sut = solid_bsp2{ segs, partitionPolicy, cmp };
    }

    virtual void TearDown()
    {

    }

    polygon2 pgon;
    solid_bsp2 sut;
};

TEST_F(polygon_solid_bsptree2d_fixture, ray_tracer_simple_polygon_Point_outside_to_left_and_centered_Returns_true)
{
    using namespace geometrix;
    auto origin = point2{ -2.0, 2.5 };

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    ASSERT_TRUE(result);
    EXPECT_TRUE(cmp.equals(result.intersection_distance(), 2.0));
}

TEST_F(polygon_solid_bsptree2d_fixture, ray_tracer_simple_polygon_Point_outside_to_left_and_low_Returns_false)
{
    using namespace geometrix;
    auto origin = point2{ -2.0, -2.5 };

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    EXPECT_FALSE(result);
}

TEST_F(polygon_solid_bsptree2d_fixture, ray_tracer_simple_polygon_Point_insideCenter_Returns_true)
{
    using namespace geometrix;
    auto origin = point2{ 2.0, 2.0 };

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    ASSERT_TRUE(result);
    EXPECT_TRUE(cmp.equals(result.intersection_distance(), 0.0));
}


template <typename Segment, typename Point>
inline std::vector<std::tuple<Segment, int>> data_polygon_with_holes_as_segment_range(const geometrix::polygon_with_holes<Point>& p)
{
    using namespace geometrix;

    typedef point_sequence_traits< polygon<Point> > access;
    std::vector<std::tuple<Segment, int>> segments;
    auto size = access::size(p.get_outer());
    //for (std::size_t i = 0, j = 1; i < size; ++i, j = (j + 1) % size) {
    //    auto segment = construct<Segment>(access::get_point(p.get_outer(), i), access::get_point(p.get_outer(), j));
    //    segments.push_back(segment);
    //}

    std::size_t h = 0;
    for (const auto& hole : p.get_holes())
    {
        size = access::size(hole);
        for (std::size_t i = 0, j = 1; i < size; ++i, j = (j + 1) % size) {
            auto segment = construct<Segment>(access::get_point(hole, i), access::get_point(hole, j));
            segments.push_back(std::make_tuple(segment, static_cast<int>(h)));
        }

        ++h;
    }

    return std::move(segments);
}

struct first_of_tuple_simplex_extractor
{
    template <typename T1, typename T2>
    const T1& operator()(const std::tuple<T1, T2>& item) const { return std::get<0>(item); }

    template <typename T1, typename T2>
    std::tuple<T1, T2> make_split(const T1& item, const std::tuple<T1, T2>& u) const { return std::make_tuple(item, std::get<1>(u)); }
};

struct set_data_node_visitor
{
    template <typename TreePtr, typename SplitItem, typename Node>
    void operator()(TreePtr&&, SplitItem&& item, Node&& pNode) const
    {
        pNode->data = std::get<1>(*item);
    }
};

struct data_polygon_with_holes_solid_bsptree2d_fixture : geometry_kernel_2d_fixture
{
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2, geometrix::back_solid_leaf_bsp_traits<segment2> >;

    data_polygon_with_holes_solid_bsptree2d_fixture() = default;

    virtual void SetUp()
    {
        using namespace geometrix;
        using boost::adaptors::transformed;

        areas = std::vector<polygon2>{
              (polygon2{ { -59.842988908174448, 161.51553271198645 },{ -59.567088058101945, 162.04732614941895 },{ -59.101964120694902, 162.10330136166885 },{ -59.098964120668825, 162.10430136183277 },{ -12.036964120692573, 162.41030136169866 },{ -11.979964120662771, 162.3063013618812 },{ -13.347964120679535, 160.199301361572 },{ -13.346964120690245, 160.19830136187375 },{ -6.7819641206879169, 160.20030136173591 },{ -6.7589641207014211, 162.30430136201903 },{ -6.7009641206823289, 162.36130136158317 },{ 1.9070358793251216, 162.47630136180669 },{ 6.1220358792925254, 162.52130136173218 },{ 6.1810358793009073, 162.46130136167631 },{ 6.1700358793023042, 160.32830136176199 },{ 6.171035879291594, 160.32730136159807 },{ 13.375935879303142, 160.3863013619557 },{ 13.376935879292432, 160.38730136165395 },{ 13.353935879305936, 162.48130136169493 },{ 13.410935879335739, 162.5403013615869 },{ 23.190447447297629, 162.66430199984461 },{ 23.073172725096811, 163.8163536824286 },{ 13.443935879331548, 163.73030136199668 },{ 13.384935879323166, 163.78730136202648 },{ 13.326935879304074, 166.49730136198923 },{ 6.2540358793339692, 166.39930136175826 },{ 6.2240358793060295, 163.82730136159807 },{ 6.1660358792869374, 163.77030136156827 },{ 1.9030358793097548, 163.70730136195198 },{ -5.1529641206725501, 163.65030136192217 },{ -5.2129641206702217, 163.70930136181414 },{ -5.2129641206702217, 167.92330136196688 },{ -5.1549641207093373, 167.98230136185884 },{ 2.0060358793125488, 168.02830136194825 },{ 2.0090358793386258, 169.41630136175081 },{ 2.0080358792911284, 169.41730136191472 },{ -6.8139641206944361, 169.3523013619706 },{ -6.7209641207009554, 163.82730136159807 },{ -6.7769641206832603, 163.76830136170611 },{ -11.881964120664634, 163.54130136175081 },{ -11.88696412066929, 163.54130136175081 },{ -12.470964120700955, 163.57230136170983 },{ -59.089964120707009, 163.16130136186257 },{ -59.106964120699558, 163.16030136169866 },{ -59.138964120706078, 163.16030136169866 },{ -59.140964120684657, 163.15930136200041 },{ -60.326964120671619, 163.09630136191845 },{ -60.363964120682795, 163.10930136172101 },{ -62.098964120668825, 164.67330136196688 },{ -62.115964120661374, 164.71030136197805 },{ -62.157964120677207, 165.68630136176944 },{ -62.157964120677207, 165.68730136193335 },{ -62.191964120662306, 168.94830136187375 },{ -62.133964120701421, 169.00830136192963 },{ -57.079964120697696, 169.05130136199296 },{ -57.073964120703749, 170.63330136192963 },{ -57.074964120693039, 170.63430136162788 },{ -60.910964120703284, 170.6023013619706 },{ -62.163964120671153, 170.5903013618663 },{ -62.222964120679535, 170.6473013618961 },{ -62.299964120669756, 175.73630136158317 },{ -62.241964120708872, 175.7953013619408 },{ -60.893964120710734, 175.824301361572 },{ -60.894964120700024, 175.824301361572 },{ -60.970964120700955, 181.81730136182159 },{ -61.634964120690711, 181.80530136171728 },{ -61.640964120684657, 181.80530136171728 },{ -62.615964120661374, 181.92230136180297 },{ -62.66596412070794, 181.97930136183277 },{ -62.658964120666496, 185.99130136193708 },{ -62.645964120689314, 186.02530136192217 },{ -62.269964120700024, 186.44030136195943 },{ -62.267964120663237, 189.92230136180297 },{ -62.628964120696764, 190.39830136159435 },{ -62.639964120695367, 190.42930136201903 },{ -62.718964120664168, 196.25930136162788 },{ -62.690964120673016, 196.30730136157945 },{ -62.316964120662306, 196.51230136165395 },{ -62.29396412067581, 196.51830136170611 },{ -60.749964120681398, 196.57830136176199 },{ -60.749964120681398, 196.5793013619259 },{ -60.829964120697696, 202.53330136183649 },{ -62.360964120714925, 202.47330136178061 },{ -62.421964120701887, 202.53130136197433 },{ -62.571964120666962, 208.10330136166885 },{ -62.571964120666962, 208.10530136199668 },{ -62.881964120664634, 208.65630136197433 },{ -62.888964120706078, 208.67930136201903 },{ -62.91696412069723, 209.83830136200413 },{ -62.898964120715391, 209.87830136157572 },{ -62.523964120715391, 210.21230136184022 },{ -62.259964120690711, 211.41430136188865 },{ -62.206964120676275, 211.45830136165023 },{ -59.493964120687451, 211.5403013615869 },{ -59.492964120698161, 211.5403013615869 },{ -59.506964120664634, 212.72630136180669 },{ -64.735964120714925, 212.68430136190727 },{ -64.998964120692108, 211.46430136170238 },{ -65.001964120659977, 211.45830136165023 },{ -65.001964120659977, 211.45730136195198 },{ -65.002964120707475, 211.44630136201158 },{ -65.003964120696764, 211.44030136195943 },{ -65.000964120670687, 211.4313013618812 },{ -64.936964120715857, 202.31130136176944 },{ -64.935964120668359, 202.30830136174336 },{ -64.860964120714925, 196.02730136178434 },{ -64.716964120685589, 182.10430136183277 },{ -64.689964120683726, 175.37630136171356 },{ -64.655964120698627, 168.41130136186257 },{ -64.655964120698627, 168.41030136169866 },{ -64.66796412068652, 165.70330136176199 },{ -64.66896412067581, 165.70130136189982 },{ -64.646964120678604, 164.42530136182904 },{ -64.371964120713528, 163.34530136175454 },{ -64.189964120683726, 162.70730136195198 },{ -64.188964120694436, 162.7043013619259 },{ -63.38696412066929, 161.4313013618812 },{ -62.644964120700024, 160.78430136200041 },{ -61.757964120712131, 160.40330136194825 },{ -61.751964120659977, 160.40130136162043 },{ -61.009964120690711, 160.19530136184767 },{ -61.008964120701421, 160.19530136184767 },{ -61.004964120686054, 160.19430136168376 },{ -59.743964120687451, 159.95230136159807 },{ -59.739964120672084, 159.95230136159807 },{ -59.236964120704215, 159.9153013615869 } })
            , (polygon2{ { -126.81296412070515, 159.53230136167258 },{ -126.77596412069397, 159.54730136180297 },{ -126.14496412070002, 159.54830136196688 },{ -125.30996412067907, 159.56030136160553 },{ -123.14796412066789, 159.57030136184767 },{ -120.15096412069397, 159.59130136156455 },{ -119.14996412070468, 159.59530136175454 },{ -118.70996412070235, 161.21830136189237 },{ -118.58896412071772, 161.24230136163533 },{ -117.92296412069118, 160.37830136157572 },{ -117.9209641207126, 160.37630136171356 },{ -116.9429641207098, 159.88230136176571 },{ -116.93896412069444, 159.88030136190355 },{ -115.40296412067255, 159.59430136159062 },{ -115.37896412069676, 161.9433013619855 },{ -115.31896412069909, 162.00130136171356 },{ -101.30396412068512, 161.86930136196315 },{ -101.30196412070654, 161.86830136179924 },{ -101.24196412070887, 161.86830136179924 },{ -83.41596412070794, 161.8863013619557 },{ -81.687964120705146, 161.94030136195943 },{ -81.627964120707475, 161.88430136162788 },{ -81.535964120703284, 159.71730136172846 },{ -80.141964120673947, 159.71430136170238 },{ -80.137964120716788, 159.71230136184022 },{ -80.119964120676741, 159.71430136170238 },{ -80.105964120710269, 159.71430136170238 },{ -80.103964120673481, 159.7153013618663 },{ -78.94796412071446, 159.81930136168376 },{ -78.945964120677672, 159.81930136168376 },{ -78.246964120713528, 159.96230136184022 },{ -78.240964120661374, 159.96430136170238 },{ -77.574964120693039, 160.25030136201531 },{ -77.005964120675344, 160.62630136171356 },{ -75.845964120700955, 161.59930136194453 },{ -75.843964120664168, 161.60130136180669 },{ -75.361964120704215, 162.34930136194453 },{ -75.360964120714925, 162.35130136180669 },{ -74.972964120679535, 163.81930136168376 },{ -74.90096412069397, 165.29630136163905 },{ -74.90096412069397, 165.29830136196688 },{ -74.860964120714925, 165.70830136165023 },{ -74.859964120667428, 165.71130136167631 },{ -74.859964120667428, 165.72630136180669 },{ -74.857964120688848, 165.74430136196315 },{ -74.859964120667428, 165.74830136168748 },{ -74.978964120673481, 194.2153013618663 },{ -74.979964120662771, 194.21630136156455 },{ -75.021964120678604, 200.42930136201903 },{ -75.049964120669756, 206.92830136185512 },{ -75.053964120685123, 210.60630136169493 },{ -75.04296412068652, 212.5973013616167 },{ -75.04396412067581, 212.59830136178061 },{ -77.55796412070049, 212.58230136195198 },{ -77.562964120705146, 211.20730136195198 },{ -77.567964120709803, 211.18430136190727 },{ -77.838964120717719, 210.6473013618961 },{ -77.861964120704215, 210.62430136185139 },{ -78.385964120680001, 210.35930136172101 },{ -78.40296412067255, 210.35430136183277 },{ -79.453964120708406, 210.23030136199668 },{ -79.459964120702352, 210.23030136199668 },{ -80.584964120702352, 210.24430136196315 },{ -80.596964120690245, 210.24630136182532 },{ -81.818964120699093, 210.56130136176944 },{ -81.798964120680466, 207.36230136174709 },{ -81.796964120701887, 207.36030136188492 },{ -80.715964120696299, 207.23030136199668 },{ -79.055964120663702, 207.02730136178434 },{ -77.837964120670222, 206.88230136176571 },{ -77.787964120681863, 206.824301361572 },{ -77.848964120668825, 201.26530136168003 },{ -77.909964120713994, 201.20730136195198 },{ -82.40296412067255, 201.31930136168376 },{ -82.398964120715391, 194.9773013619706 },{ -81.448964120703749, 194.69130136165768 },{ -81.409964120713994, 194.63730136165395 },{ -81.425964120717254, 193.08730136184022 },{ -77.592964120674878, 191.83430136181414 },{ -77.554964120674413, 191.78230136167258 },{ -77.338964120717719, 165.67730136169121 },{ -77.339964120707009, 165.66730136191472 },{ -77.517964120663237, 164.7453013616614 },{ -77.539964120660443, 164.71130136167631 },{ -80.036964120692573, 163.08330136165023 },{ -80.062964120705146, 163.074301361572 },{ -83.303964120685123, 162.97630136180669 },{ -83.305964120663702, 162.97630136180669 },{ -101.46796412067488, 163.1933013619855 },{ -101.46996412071167, 163.19230136182159 },{ -115.51396412070608, 163.21630136156455 },{ -115.52296412066789, 163.21730136172846 },{ -118.52396412071539, 163.79730136180297 },{ -118.56996412068838, 163.8523013619706 },{ -118.51296412071679, 180.76930136187002 },{ -118.51396412070608, 180.77030136156827 },{ -123.33196412067628, 180.91330136172473 },{ -123.33296412066557, 180.91230136202648 },{ -123.30896412068978, 168.43930136179551 },{ -123.2159641206963, 163.1883013616316 },{ -123.27396412071539, 163.12930136173964 },{ -126.88896412070608, 163.06130136176944 },{ -126.88996412069537, 163.06130136176944 },{ -135.26654051680816, 163.07025714917108 },{ -136.06069755629869, 159.61333827115595 },{ -135.27796412067255, 159.60630136169493 },{ -129.1249641206814, 159.54930136166513 },{ -126.82096412067767, 159.52430136175826 } })
            , (polygon2{ { -70.234964120667428, 119.72530136164278 },{ -69.461964120680932, 120.24930136185139 },{ -69.458964120713063, 120.25230136187747 },{ -69.160964120703284, 120.76330136181787 },{ -69.160964120703284, 120.76430136198178 },{ -69.132964120712131, 122.36530136177316 },{ -69.147964120667893, 122.82230136170983 },{ -69.147964120667893, 122.82330136187375 },{ -69.207964120665565, 125.8403013618663 },{ -69.207964120665565, 125.84130136156455 },{ -69.213964120717719, 128.53030136181042 },{ -69.229964120662771, 131.92530136182904 },{ -69.282964120677207, 134.21830136189237 },{ -69.342964120674878, 137.07530136173591 },{ -69.342964120674878, 137.07730136159807 },{ -69.30796412070049, 138.7153013618663 },{ -69.51196412066929, 141.08430136181414 },{ -69.512964120716788, 141.08630136167631 },{ -70.024964120704681, 141.49130136193708 },{ -70.029964120709337, 141.4953013616614 },{ -70.030964120698627, 141.49630136182532 },{ -70.04096412070794, 141.49430136196315 },{ -70.15196412068326, 141.49830136168748 },{ -70.659964120713994, 141.09430136159062 },{ -71.225964120705612, 140.32530136173591 },{ -71.458964120713063, 139.29430136177689 },{ -71.458964120713063, 139.2903013615869 },{ -71.491964120708872, 137.9653013618663 },{ -71.491964120708872, 137.96330136200413 },{ -71.486964120704215, 137.32830136176199 },{ -71.335964120691642, 129.36530136177316 },{ -71.314964120683726, 127.40330136194825 },{ -71.228964120673481, 123.4313013618812 },{ -71.174964120669756, 121.26330136181787 },{ -71.174964120669756, 121.26030136179179 },{ -71.203964120708406, 120.3403013618663 },{ -71.203964120708406, 120.33830136200413 },{ -70.949964120693039, 119.96830136189237 },{ -70.946964120666962, 119.96630136156455 },{ -70.366964120708872, 119.75130136171356 },{ -70.262964120716788, 119.72930136183277 },{ -70.260964120680001, 119.72830136166885 },{ -70.256964120664634, 119.7273013619706 },{ -70.239964120672084, 119.72330136178061 } })
            , (polygon2{ { -70.155964120698627, 104.33330136165023 },{ -70.15396412066184, 104.33730136184022 },{ -69.719964120711666, 104.66930136177689 },{ -69.410964120703284, 105.07830136176199 },{ -69.250964120670687, 105.51330136181787 },{ -69.239964120672084, 107.16830136161298 },{ -69.249964120681398, 109.04130136175081 },{ -69.550964120717254, 109.91830136161298 },{ -70.169964120665099, 110.32330136187375 },{ -70.172964120691177, 110.32530136173591 },{ -70.174964120669756, 110.32630136189982 },{ -70.177964120695833, 110.32530136173591 },{ -70.553964120685123, 110.21730136172846 },{ -71.014964120695367, 109.94030136195943 },{ -71.271964120678604, 109.39430136187002 },{ -71.272964120667893, 109.38930136198178 },{ -71.264964120695367, 108.33530136197805 },{ -71.253964120696764, 106.74930136185139 },{ -71.241964120708872, 105.1653013615869 },{ -71.240964120661374, 105.15930136200041 },{ -71.148964120715391, 104.80230136169121 },{ -70.230964120710269, 104.34930136194453 },{ -70.174964120669756, 104.32130136201158 } })
            , (polygon2{ { -78.002138914249372, 95.595670043956488 },{ -77.446964120666962, 96.066301361657679 },{ -77.438964120694436, 96.072301361709833 },{ -76.706964120676275, 96.485301361884922 },{ -76.700964120682329, 96.487301361747086 },{ -76.691964120662306, 96.494301361963153 },{ -76.686964120715857, 96.49730136198923 },{ -76.68396412068978, 96.504301361739635 },{ -76.241964120708872, 96.963301362004131 },{ -75.835964120691642, 97.670301361940801 },{ -75.350964120705612, 98.876301361713558 },{ -75.348964120668825, 98.882301361765712 },{ -75.047964120691177, 99.965301361866295 },{ -75.047964120691177, 99.970301361754537 },{ -74.619964120676741, 101.73330136202276 },{ -74.616964120708872, 101.73930136160925 },{ -74.616964120708872, 101.74330136179924 },{ -74.615964120661374, 101.75330136157572 },{ -74.613964120682795, 101.76230136165395 },{ -74.615964120661374, 101.76930136187002 },{ -74.587964120670222, 103.0903013618663 },{ -74.586964120680932, 103.09230136172846 },{ -74.586964120680932, 103.11130136158317 },{ -74.575964120682329, 105.05930136190727 },{ -74.565964120673016, 107.01230136165395 },{ -74.550964120717254, 108.30730136157945 },{ -74.539964120660443, 110.0403013615869 },{ -74.523964120715391, 111.02330136159435 },{ -74.509964120690711, 112.11430136160925 },{ -74.500964120670687, 112.12930136173964 },{ -74.479964120662771, 113.08830136200413 },{ -74.514964120695367, 114.93230136157945 },{ -74.57296412071446, 120.61830136179924 },{ -74.571964120666962, 120.6203013616614 },{ -74.840964120696299, 141.39830136159435 },{ -74.881964120664634, 141.39530136156827 },{ -74.945964120677672, 141.4543013619259 },{ -74.944964120688383, 142.98930136160925 },{ -74.962964120670222, 144.60530136199668 },{ -75.022964120667893, 145.25530136190355 },{ -75.228964120673481, 146.07630136189982 },{ -75.784964120713994, 146.81130136176944 },{ -75.786964120692573, 146.8133013616316 },{ -76.457964120665565, 147.47930136183277 },{ -77.095964120700955, 147.69530136184767 },{ -78.27896412066184, 147.87730136187747 },{ -78.279964120709337, 147.87730136187747 },{ -79.738964120682795, 148.03430136200041 },{ -79.744964120676741, 148.03730136202648 },{ -79.759964120690711, 148.03730136202648 },{ -79.773964120715391, 148.03930136188865 },{ -79.77896412066184, 148.03730136202648 },{ -85.266964120673947, 148.00530136190355 },{ -90.124964120681398, 147.99330136179924 },{ -101.40196412068326, 147.96030136197805 },{ -119.15796412067721, 147.97330136178061 },{ -119.18696412071586, 147.98430136172101 },{ -120.32396412070375, 147.96630136156455 },{ -121.18896412069444, 147.95130136189982 },{ -122.18796412070515, 147.93530136160553 },{ -123.18696412071586, 147.91830136161298 },{ -123.66596412070794, 147.91030136169866 },{ -123.76596412068466, 146.71430136170238 },{ -123.83296412066557, 139.81430136179551 },{ -121.95707778737415, 141.13007202837616 },{ -120.19732916232897, 141.58186023682356 },{ -119.50396412069676, 141.81630136165768 },{ -103.97096412070096, 143.40030136192217 },{ -103.96796412067488, 143.40130136162043 },{ -103.72396412066882, 143.70030136173591 },{ -103.71896412066417, 143.70630136178806 },{ -103.10396412067348, 144.2613013619557 },{ -103.10296412068419, 144.2613013619557 },{ -102.4879641206935, 144.79230136191472 },{ -102.48596412071493, 144.79430136177689 },{ -101.76096412068, 145.34230136172846 },{ -101.75596412067534, 145.34530136175454 },{ -100.71396412071772, 145.95730136195198 },{ -100.70396412070841, 145.96130136167631 },{ -100.32296412071446, 146.08530136197805 },{ -100.31996412068838, 146.08630136167631 },{ -99.749964120681398, 146.2273013619706 },{ -99.741964120708872, 146.22830136166885 },{ -98.950964120682329, 146.28630136186257 },{ -98.93296412070049, 146.28430136200041 },{ -98.360964120714925, 146.11130136158317 },{ -79.787964120681863, 146.13530136179179 },{ -79.729964120662771, 146.0793013619259 },{ -79.577964120660909, 142.55430136201903 },{ -77.605964120710269, 141.21830136189237 },{ -77.582964120665565, 141.17630136199296 },{ -77.105964120710269, 121.06930136168376 },{ -77.105964120710269, 121.06730136182159 },{ -77.235964120714925, 113.0633013616316 },{ -77.234964120667428, 113.06130136176944 },{ -77.256964120664634, 105.50830136192963 },{ -77.316964120662306, 105.449301361572 },{ -81.91796412068652, 105.50830136192963 },{ -81.91896412067581, 105.50830136192963 },{ -82.019964120700024, 103.42230136180297 },{ -78.326191454019863, 103.27319269487634 },{ -78.731748787336983, 102.51086069503799 },{ -79.848197454004548, 101.75863936170936 },{ -81.370752787333913, 100.3044140287675 },{ -80.251964120659977, 98.745301361661404 },{ -80.255964120675344, 98.744301361963153 },{ -80.263964120706078, 98.737301361747086 },{ -80.267964120663237, 98.734301361721009 },{ -80.280964120698627, 98.725301361642778 },{ -80.282964120677207, 98.721301361918449 },{ -81.253449456591625, 97.910997248720378 } })
            , (polygon2{ { 22.701023126370274, 148.6442247191444 },{ 18.437935879337601, 148.60430136183277 },{ 2.057035879290197, 148.47930136183277 },{ -60.465964120696299, 148.19730136170983 },{ -60.468964120664168, 148.19830136187375 },{ -60.482964120688848, 148.19730136170983 },{ -60.503964120696764, 148.19730136170983 },{ -60.505964120675344, 148.19630136201158 },{ -61.949964120693039, 148.0903013618663 },{ -61.955964120686986, 148.0903013618663 },{ -63.04196412069723, 147.97930136183277 },{ -63.694964120688383, 147.8133013616316 },{ -64.194964120688383, 147.50330136157572 },{ -64.91896412067581, 146.73630136158317 },{ -65.547964120691177, 145.87730136187747 },{ -65.960964120691642, 144.93630136176944 },{ -65.962964120670222, 144.92830136185512 },{ -66.032964120677207, 144.23430136172101 },{ -66.032964120677207, 144.22830136166885 },{ -66.050964120717254, 143.33930136170238 },{ -66.050964120717254, 143.33730136184022 },{ -66.049964120669756, 141.53830136172473 },{ -66.0569641207112, 140.30130136199296 },{ -66.0569641207112, 140.30030136182904 },{ -66.047964120691177, 139.29730136180297 },{ -66.038964120671153, 137.30130136199296 },{ -66.030964120698627, 135.30430136201903 },{ -66.02696412068326, 133.97430136194453 },{ -66.019964120700024, 132.20030136173591 },{ -66.017964120663237, 131.18730136193335 },{ -66.014964120695367, 130.03030136181042 },{ -66.010964120680001, 128.70630136178806 },{ -66.004964120686054, 127.19430136168376 },{ -65.987964120693505, 125.53330136183649 },{ -65.970964120700955, 123.87130136182532 },{ -65.960964120691642, 122.76530136168003 },{ -65.945964120677672, 121.28830136172473 },{ -65.930964120663702, 118.76630136184394 },{ -65.897964120667893, 108.49930136185139 },{ -65.897964120667893, 108.44630136201158 },{ -65.858964120678138, 107.03530136169866 },{ -65.858964120678138, 107.03430136200041 },{ -65.845964120700955, 105.39130136184394 },{ -65.812964120705146, 104.27130136173218 },{ -65.812964120705146, 104.26730136200786 },{ -65.844964120711666, 103.58330136165023 },{ -65.845964120700955, 103.57730136159807 },{ -66.097964120679535, 102.11830136179924 },{ -66.105964120710269, 102.1023013619706 },{ -66.105964120710269, 102.09930136194453 },{ -66.083964120713063, 102.09630136191845 },{ -64.060964120668359, 101.23730136174709 },{ -64.050964120717254, 101.23130136169493 },{ -62.847970449423883, 100.34976993687451 },{ -55.39924044336658, 102.66576161934063 },{ -56.109964120667428, 104.60430136183277 },{ -56.112964120693505, 104.62130136182532 },{ -56.191964120662306, 108.58730136184022 },{ -62.440964120673016, 108.51730136200786 },{ -62.499964120681398, 108.57530136173591 },{ -62.503964120696764, 111.62130136182532 },{ -62.44796412071446, 111.68030136171728 },{ -59.846964120690245, 111.7563013616018 },{ -59.80896412068978, 114.71130136167631 },{ -59.80896412068978, 114.71330136200413 },{ -59.753964120696764, 115.98530136188492 },{ -61.958964120713063, 115.99030136177316 },{ -61.997964120702818, 116.00830136192963 },{ -63.169964120665099, 117.36130136158317 },{ -63.1819641207112, 117.38530136179179 },{ -63.44796412071446, 118.89330136170611 },{ -63.448964120703749, 118.90230136178434 },{ -63.434964120679069, 127.70230136159807 },{ -63.379964120686054, 127.76030136179179 },{ -61.977964120684192, 127.82630136189982 },{ -61.944964120688383, 130.16230136202648 },{ -61.888964120706078, 130.22030136175454 },{ -60.053964120685123, 130.28130136197433 },{ -60.039964120660443, 134.35430136183277 },{ -60.04096412070794, 134.35530136199668 },{ -62.619964120676741, 134.26730136200786 },{ -62.680964120663702, 134.324301361572 },{ -62.816964120662306, 141.58830136200413 },{ -62.758964120701421, 141.64830136159435 },{ -60.465964120696299, 141.69530136184767 },{ -60.462964120670222, 141.69530136184767 },{ -55.813964120694436, 141.49130136193708 },{ -55.767964120663237, 146.27530136192217 },{ -55.709964120702352, 146.33330136165023 },{ -39.65096412069397, 146.42330136196688 },{ 0.75180854595964774, 144.11540202843025 },{ 7.1890558793093078, 141.00939002865925 },{ 11.930407879292034, 139.42538402834907 },{ 22.31368148420006, 137.0862382221967 } })
        };

        auto bounds = get_bounds(areas[0], cmp);
        for (std::size_t i = 1; i < areas.size(); ++i) {
            bounds = update_bound(bounds, get_bounds(areas[i], cmp));
        }

        point2 ll = { std::get<e_xmin>(bounds), std::get<e_ymin>(bounds) };
        point2 ur = { std::get<e_xmax>(bounds), std::get<e_ymax>(bounds) };

        auto outer = get_outer_polygon(ll, ur, 5.0);

        std::vector<polygon2> holes;
        boost::copy(areas | transformed([](const polygon2& pgon) { return reverse(pgon); }), std::back_inserter(holes));

        poly = polygon_with_holes2{ outer, holes };

        segs = data_polygon_with_holes_as_segment_range<segment2>(poly);
        auto partitionPolicy = partition_policies::autopartition_policy();
        sut = solid_bsp2{ segs, partitionPolicy, cmp, first_of_tuple_simplex_extractor() };
    }

    virtual void TearDown()
    {

    }

    polygon2 get_outer_polygon(point2 ll, point2 ur, double offset)
    {
        using namespace geometrix;

        ll = ll - vector2{ offset, offset };
        ur = ur + vector2{ offset, offset };

        return { ll, point2{ get<0>(ur), get<1>(ll) }, ur, point2{ get<0>(ll), get<1>(ur) } };
    }

    std::vector<polygon2> areas;
    polygon_with_holes2 poly;
    std::vector<std::tuple<segment2, int>> segs;
    solid_bsp2 sut;
};

TEST_F(data_polygon_with_holes_solid_bsptree2d_fixture, ray_tracer_in_polygon_with_holes_Point_outside_Returns_true_with_data_4)
{
    using namespace geometrix;
    point2 origin = get_centroid(areas[2]) + vector2{ -20.0, 0.0 };//! areas[2] has an interior centroid -> which is an exterior point because areas[2] is a hole.
    sut.point_in_solid_space(origin, cmp);

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    point2 q = origin + result.intersection_distance() * ray;

    auto index = result.get_data();

    EXPECT_TRUE(result);
    EXPECT_EQ(320UL, index);
    EXPECT_TRUE(numeric_sequence_equals(q, point2{ -77.331149141034288, 130.56153449407171 }, cmp));
}

TEST_F(data_polygon_with_holes_solid_bsptree2d_fixture, ray_tracer_in_polygon_with_holes_Point_outside_Returns_true_with_data_3)
{
    using namespace geometrix;
    point2 origin = get_centroid(areas[3]) + vector2{ -2.0, 0.0 };//! areas[3] has an interior centroid -> which is an exterior point because areas[3] is a hole.
    sut.point_in_solid_space(origin, cmp);

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    point2 q = origin + result.intersection_distance() * ray;
    ignore_unused_warning_of(q);

    auto index = result.get_data();

    EXPECT_TRUE(result);
    EXPECT_EQ(283UL, index);
    EXPECT_TRUE(cmp.equals(result.intersection_distance(), 1.0100191570136670));
}

TEST_F(data_polygon_with_holes_solid_bsptree2d_fixture, ray_tracer_in_polygon_with_holes_Point_outside_Returns_true_with_data_1)
{
    using namespace geometrix;
    point2 origin = get_centroid(areas[1]) + vector2{ -2.0, 0.0 };//! areas[3] has an interior centroid -> which is an exterior point because areas[3] is a hole.
    sut.point_in_solid_space(origin, cmp);

    auto ray = vector2{ 1.0, 0.0 };
    auto result = sut.ray_intersection(origin, ray, cmp);

    point2 q = origin + result.intersection_distance() * ray;
    ignore_unused_warning_of(q);

    auto index = result.get_data();
    EXPECT_TRUE(result);
    EXPECT_EQ(153UL, index);
}

struct data_box_grid_solid_bsptree2d_fixture : geometry_kernel_2d_fixture
{
    using solid_bsp2 = geometrix::solid_leaf_bsp_tree<segment2, geometrix::back_solid_leaf_bsp_traits<segment2> >;

    data_box_grid_solid_bsptree2d_fixture() = default;

    polygon2 translate(const polygon2& pgon, const vector2& v)
    {
        using boost::adaptors::transformed;
        polygon2 result;
        boost::copy(pgon | transformed([&v](const point2& p) { return point2{ p + v }; }), std::back_inserter(result));

        return result;
    }

    virtual void SetUp()
    {
        using namespace geometrix;
        using boost::adaptors::transformed;

        auto pgon = polygon2{ point2{ 0,0 }, point2{ 0,5 }, point2{ 5,5 }, point2{ 5,0 } };

        for (int i = 0; i < 4; ++i)
        {
            for (int j = 0; j < 4; ++j)
            {
                auto v = vector2{ i * 6.0, j * 6.0 };
                data.push_back(static_cast<std::uint32_t>(areas.size())); 
                data.push_back(static_cast<std::uint32_t>(areas.size())); 
                data.push_back(static_cast<std::uint32_t>(areas.size())); 
                data.push_back(static_cast<std::uint32_t>(areas.size())); 
                areas.push_back(translate(pgon, v));
            }
        }

        auto bounds = get_bounds(areas[0], cmp);
        for (std::size_t i = 1; i < areas.size(); ++i) {
            bounds = update_bound(bounds, get_bounds(areas[i], cmp));
        }

        point2 ll = { std::get<e_xmin>(bounds), std::get<e_ymin>(bounds) };
        point2 ur = { std::get<e_xmax>(bounds), std::get<e_ymax>(bounds) };

        auto outer = get_outer_polygon(ll, ur, 5.0);

        std::vector<polygon2>& holes = areas;
        poly = polygon_with_holes2{ outer, holes };

        segs = data_polygon_with_holes_as_segment_range<segment2>(poly);
        auto partitionPolicy = partition_policies::autopartition_policy();
        sut = solid_bsp2{ segs, partitionPolicy, cmp, first_of_tuple_simplex_extractor() };
    }

    virtual void TearDown()
    {

    }

    polygon2 get_outer_polygon(point2 ll, point2 ur, double offset)
    {
        using namespace geometrix;

        ll = ll - vector2{ offset, offset };
        ur = ur + vector2{ offset, offset };

        return { ll, point2{ get<0>(ur), get<1>(ll) }, ur, point2{ get<0>(ll), get<1>(ur) } };
    }

    std::vector<polygon2> areas;
    polygon_with_holes2 poly;
    std::vector<std::tuple<segment2, int>> segs;
    solid_bsp2 sut;
    std::vector<std::uint32_t> data;
};

TEST_F(data_box_grid_solid_bsptree2d_fixture, test_grid_bsp)
{
    using namespace geometrix;

    auto axes = { vector2{ -1.0, 0.0 }, vector2{ 1.0, 0.0}, vector2{ 0.0, -1.0 }, vector2{ 0.0, 1.0 } };
    double offset = 3.0;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            std::size_t aindex = i * 4 + j;
            auto center = get_centroid(areas[aindex]);
            for( auto v : axes )
            {
                point2 origin = center + offset * v;
                vector2 ray = -v;
                auto result = sut.ray_intersection(origin, ray, cmp);
                point2 q = origin + result.intersection_distance() * ray;
                ignore_unused_warning_of(q);

                EXPECT_TRUE(result);

                auto index = result.get_data();

                EXPECT_EQ(aindex, data[index]);
            }
        }
    }
}

TEST_F(data_box_grid_solid_bsptree2d_fixture, test_min_distance_solid_bsp)
{
    using namespace geometrix;

    auto axes = { vector2{ -1.0, 0.0 }, vector2{ 1.0, 0.0}, vector2{ 0.0, -1.0 }, vector2{ 0.0, 1.0 } };
    double offset = 2.75;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            std::size_t aindex = i * 4 + j;
            auto center = get_centroid(areas[aindex]);
            for( auto v : axes )
            {
                point2 origin = center + offset * v;
                std::size_t idx;
                auto result = sut.get_min_distance_to_solid(origin, idx, cmp);

                EXPECT_TRUE(cmp.equals(0.25, result));
                EXPECT_EQ(aindex, data[idx]);
            }
        }
    }
}

#include <geometrix/utility/scope_timer.ipp>
TEST_F(data_box_grid_solid_bsptree2d_fixture, time_grid_bsp_raytrace)
{
    using namespace geometrix;

    auto axes = { vector2{ -1.0, 0.0 }, vector2{ 1.0, 0.0 }, vector2{ 0.0, -1.0 }, vector2{ 0.0, 1.0 } };
    double offset = 3.0;

    int nRuns = 1000;
    bool b = false;
    {
        GEOMETRIX_MEASURE_SCOPE_TIME("time_grid_bsp_raytrace_with_autopartition");
        for (int r = 0; r < nRuns; ++r)
        {
            for (int i = 0; i < 4; ++i)
            {
                for (int j = 0; j < 4; ++j)
                {
                    //auto v = vector2{ i * 6.0, j * 6.0 };
                    std::size_t aindex = i * 4 + j;
                    auto center = get_centroid(areas[aindex]);

                    for (auto v : axes)
                    {
                        point2 origin = center + offset * v;
                        vector2 ray = -v;
                        auto result = sut.ray_intersection(origin, ray, cmp);
                        b = result;
                    }
                }
            }
        }
    }
}

class scored_selector_solid_bsp_tree_fixture : public data_box_grid_solid_bsptree2d_fixture
{
public:

    virtual void SetUp()
    {
        using namespace geometrix;
        using boost::adaptors::transformed;

        auto pgon = polygon2{ point2{ 0,0 }, point2{ 0,5 }, point2{ 5,5 }, point2{ 5,0 } };

        for (int i = 0; i < 4; ++i)
        {
            for (int j = 0; j < 4; ++j)
            {
                auto v = vector2{ i * 6.0, j * 6.0 };
                data.push_back(static_cast<std::uint32_t>(areas.size()));
                data.push_back(static_cast<std::uint32_t>(areas.size()));
                data.push_back(static_cast<std::uint32_t>(areas.size()));
                data.push_back(static_cast<std::uint32_t>(areas.size()));
                areas.push_back(translate(pgon, v));
            }
        }

        auto bounds = get_bounds(areas[0], cmp);
        for (std::size_t i = 1; i < areas.size(); ++i)
        {
            bounds = update_bound(bounds, get_bounds(areas[i], cmp));
        }

        point2 ll = { std::get<e_xmin>(bounds), std::get<e_ymin>(bounds) };
        point2 ur = { std::get<e_xmax>(bounds), std::get<e_ymax>(bounds) };

        auto outer = get_outer_polygon(ll, ur, 5.0);

        std::vector<polygon2>& holes = areas;
        poly = polygon_with_holes2{ outer, holes };

        segs = data_polygon_with_holes_as_segment_range<segment2>(poly);

        using cmp_t = std::decay<decltype(cmp)>::type;
        using extractor_t = first_of_tuple_simplex_extractor;
        using selector_t = partition_policies::scored_selector_policy<extractor_t, cmp_t>;

        sut = solid_bsp2{ segs, selector_t(extractor_t(), cmp), cmp, first_of_tuple_simplex_extractor() };
    }
    
};

TEST_F(scored_selector_solid_bsp_tree_fixture, test_grid_bsp)
{
    using namespace geometrix;

    auto axes = { vector2{ -1.0, 0.0 }, vector2{ 1.0, 0.0 }, vector2{ 0.0, -1.0 }, vector2{ 0.0, 1.0 } };
    double offset = 3.0;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            //auto v = vector2{ i * 6.0, j * 6.0 };
            std::size_t aindex = i * 4 + j;
            auto center = get_centroid(areas[aindex]);

            for (auto v : axes)
            {
                point2 origin = center + offset * v;
                vector2 ray = -v;
                auto result = sut.ray_intersection(origin, ray, cmp);
                point2 q = origin + result.intersection_distance() * ray;
                ignore_unused_warning_of(q);

                EXPECT_TRUE(result);

                auto index = result.get_data();

                EXPECT_EQ(aindex, data[index]);
            }
        }
    }
}

TEST_F(scored_selector_solid_bsp_tree_fixture, time_grid_scored_bsp_raytrace)
{
    using namespace geometrix;

    auto axes = { vector2{ -1.0, 0.0 }, vector2{ 1.0, 0.0 }, vector2{ 0.0, -1.0 }, vector2{ 0.0, 1.0 } };
    double offset = 3.0;

    int nRuns = 1000;
    bool b = false;
    {
        GEOMETRIX_MEASURE_SCOPE_TIME("time_grid_scored_bsp_raytrace");
        for (int r = 0; r < nRuns; ++r)
        {
            for (int i = 0; i < 4; ++i)
            {
                for (int j = 0; j < 4; ++j)
                {
                    //auto v = vector2{ i * 6.0, j * 6.0 };
                    std::size_t aindex = i * 4 + j;
                    auto center = get_centroid(areas[aindex]);

                    for (auto v : axes)
                    {
                        point2 origin = center + offset * v;
                        vector2 ray = -v;
                        auto result = sut.ray_intersection(origin, ray, cmp);
                        b = result;
                    }
                }
            }
        }
    }

    geometrix::scope_timer_detail::call_map::instance().write();
}

TEST_F(scored_selector_solid_bsp_tree_fixture, test_bugged)
{
	using namespace geometrix;
	struct identity_extractor
	{
		segment2 const& operator()( const segment2& a ) const
		{
			return a;
		}
	};
	auto addSegments = []( const polygon2& pgon, std::vector<segment2>& segs )
	{
		auto size = pgon.size();
		for( std::size_t i = 0, j = 1; i < size; ++i, j = ( j + 1 ) % size )
			segs.emplace_back( pgon[i], pgon[j] );
	};
	auto pgon = polygon2
		{
          { -121431.11 , -1351108.8200000001  }
        , { -121430.92999999999 , -1351107.9299999999  }
        , { -121434.96000000001 , -1351103.8899999999  }
        , { -121435.46000000001 , -1351103.79  }
        , { -121439.13 , -1351105.29  }
        , { -121439.31 , -1351106.1799999999  }
        , { -121435.28 , -1351110.22  }
        , { -121434.78 , -1351110.3200000001  }
		};

	std::vector<segment2> segs;
	addSegments( pgon, segs );

    using cmp_type = std::decay<decltype(cmp)>::type;
	auto lcmp = cmp_type( 1e-8 );
	auto partitionPolicy = partition_policies::scored_selector_policy<identity_extractor, cmp_type>(identity_extractor());
	auto s2 = solid_bsp2{segs, partitionPolicy, lcmp};
}